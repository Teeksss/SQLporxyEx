# Multi-stage build for production
FROM node:18-alpine as build

# Set working directory
WORKDIR /app

# Set environment variables
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_API_URL=/api

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --silent \
    && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:1.25-alpine

# Install security updates
RUN apk update && apk upgrade \
    && apk add --no-cache curl \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf.bak 2>/dev/null || true

# Create nginx user and set permissions
RUN adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && chmod -R 755 /usr/share/nginx/html

# Security hardening
RUN sed -i '/^http {/a\\    server_tokens off;' /etc/nginx/nginx.conf \
    && sed -i '/^http {/a\\    add_header X-Frame-Options DENY;' /etc/nginx/nginx.conf \
    && sed -i '/^http {/a\\    add_header X-Content-Type-Options nosniff;' /etc/nginx/nginx.conf

# Create log directory
RUN mkdir -p /var/log/nginx \
    && chown -R nginx:nginx /var/log/nginx

# Switch to nginx user
USER nginx

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]